// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex`1400080000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000100000000000300000000000000000000000000010000000002020000000001010005000000000001000000020202000000010100000000000000010102020202020201010101040404010101040101000202020202020101010404040401010104040404020202020202`, img`
. . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . 2 . . . . . . 
. . . . . . . . . . . . . . . . . . 2 2 
. . . . 2 2 . . . . . . . . . . . 2 2 2 
. . . 2 2 . . . . . . . 2 2 2 2 2 2 2 2 
2 2 2 2 . . . 2 2 2 . 2 2 . 2 2 2 2 2 2 
2 2 2 . . . . 2 2 2 . . . . 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.builtin.brick,sprites.builtin.field0,sprites.dungeon.collectibleInsignia,sprites.dungeon.hazardLava1], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex`1000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level3":
            case "level3":return tiles.createTilemap(hex`1400080000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000100000000000300000000000000000000000000010000000002020000000001010005000000000001000000020202000000010100000000000000010102020202020201010101040404010101040101000202020202020101010404040401010104040404020202020202`, img`
. . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . 2 . . . . . . 
. . . . . . . . . . . . . . . . . . 2 2 
. . . . 2 2 . . . . . . . . . . . 2 2 2 
. . . 2 2 . . . . . . . 2 2 2 2 2 2 2 2 
2 2 2 2 . . . 2 2 2 . 2 2 . 2 2 2 2 2 2 
2 2 2 . . . . 2 2 2 . . . . 2 2 2 2 2 2 
`, [myTiles.transparency16,sprites.builtin.brick,sprites.builtin.field0,sprites.dungeon.collectibleInsignia,sprites.dungeon.hazardLava1], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
